version: "3.7"
services:
  database:
    image: postgres
    restart: always
    env_file:
      - app.env
    ports:
      - "5432:5432"
    volumes:
      - data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fullstack
  server:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: app.env
    restart: on-failure
    depends_on:
      - database
      - cache
      - clickhouse
    networks:
      - fullstack
    ports:
    - "8080:8080"
  clickhouse:
    container_name: 'clickhouse'
    image: yandex/clickhouse-server
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - ./data/clickhouse/data:/var/lib/clickhouse
    networks:
      - fullstack
  cache: 
    container_name: 'redis'
    image: redis
    restart: always
    ports:
      - '6379:6379'
    networks:
      - fullstack
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - rmoff_kafka
  
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    networks:
      - rmoff_kafka
      - fullstack
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
volumes:
  data:


networks:
  fullstack:
    driver: bridge
  rmoff_kafka:
    name: rmoff_kafka
  